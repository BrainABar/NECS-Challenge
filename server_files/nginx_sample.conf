# for passthrough use streams, allows for https to be passed to be decrypted at a later location
# stream {
upstream sampleapp {

        # server locations
        server localhost:5050 fail_timeout=2s;
        server localhost:5051 fail_timeout=2s;
}

# inspects for original port of entry
map $http_host $port {
    default 443;
    "~^[^\:]+:(?<p>\d+)$" $p;
}

server {
        listen 443 ssl default_server;
        listen [::]:443 ssl;
        server_name bryanbar.com www.bryanbar.com;

        ssl on;
        ssl_certificate /path/to/csr
        ssl_certificate_key /path/to/key

        location / {
                # Add-on headers
                proxy_set_header X-Forwarded-Host $http_host;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Forwarded $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Forwarded-Port $port;
                proxy_pass http://sampleapp;
        }

        # Can handle errors at gunicorn/flask level as well
        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }

}

# redirect back to https
server {
       listen 80;
       listen [::]:80;
       server_name bryanbar.com www.bryanbar.com;
       return 301 https://$server_name$request_uri;
}
#}